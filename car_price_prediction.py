# -*- coding: utf-8 -*-
"""Car Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yahtW9Sb4jkn3NytV-L3Sy1iI0GMH5uC
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv('/content/car data.csv')

data.head()

data.tail()

data.shape

data.info()

data.describe()

data.columns

data.corr()

data.isnull()

data.isnull().sum()

sns.distplot(data['Selling_Price'])
plt.title('Distribution of Car Prices')
plt.xlabel('Selling Price')
plt.ylabel('Density')
plt.show()

correlation_matrix = data.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

data.Fuel_Type.value_counts()

data.Selling_type.value_counts()

data.Transmission.value_counts()

#encoding categorical data
data.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace = True)
data.replace({'Selling_type':{'Dealer':0,'Individual':1}},inplace = True)
data.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace = True)
data.head()

#splitting the data and target
x = data.drop(['Car_Name','Selling_Price'],axis=1)
y = data['Selling_Price']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)
x_train.shape

#Linear regression model
lm = LinearRegression()
lm.fit(x_train,y_train)

y_predict = lm.predict(x_test)
lm.score(x_test,y_predict)

error_score = r2_score(y_test,y_predict)
print("R squared error:",error_score)

mse = mean_squared_error(y_test,y_predict)
rmse = np.sqrt(mse)
print("Root Mean Squared Error:", rmse)

"""Evaluation"""

new_car_data = [[2017,7.25,8.85,25000,0,1,0]]
new_car_df = pd.DataFrame(new_car_data)
predicted_price = lm.predict(new_car_df)

print("Predicted Price:", predicted_price)